0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.32
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/andreas/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/andreas/.npm/json_merger/0.9.12/package.tgz', '.' ]
11 verbose tarball /Users/andreas/.npm/json_merger/0.9.12/package.tgz
12 verbose folder .
13 info prepublish json_merger@0.9.12
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/andreas/.npm/1f1177db-tar.lock
16 silly lockFile f1efd310-m-json-merger-0-9-12-package-tgz tar:///Users/andreas/.npm/json_merger/0.9.12/package.tgz
17 verbose lock tar:///Users/andreas/.npm/json_merger/0.9.12/package.tgz /Users/andreas/.npm/f1efd310-m-json-merger-0-9-12-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile f1efd310-m-json-merger-0-9-12-package-tgz tar:///Users/andreas/.npm/json_merger/0.9.12/package.tgz
21 silly lockFile f1efd310-m-json-merger-0-9-12-package-tgz tar:///Users/andreas/.npm/json_merger/0.9.12/package.tgz
22 silly lockFile 6d04bd9a-s-npm-json-merger-0-9-12-package /Users/andreas/.npm/json_merger/0.9.12/package
23 verbose lock /Users/andreas/.npm/json_merger/0.9.12/package /Users/andreas/.npm/6d04bd9a-s-npm-json-merger-0-9-12-package.lock
24 silly lockFile 6d04bd9a-s-npm-json-merger-0-9-12-package /Users/andreas/.npm/json_merger/0.9.12/package
25 silly lockFile 6d04bd9a-s-npm-json-merger-0-9-12-package /Users/andreas/.npm/json_merger/0.9.12/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'json_merger',
28 silly publish   version: '0.9.12',
28 silly publish   main: 'json_merger.js',
28 silly publish   scripts: { test: 'bash runtests' },
28 silly publish   repository: {},
28 silly publish   author: { name: 'Andreas Louv', email: 'and@comprendo.dk' },
28 silly publish   license: 'ISC',
28 silly publish   description: 'Merge JSON with indicators such as `@override`, `@match`, `@delete` and `@insert` to tell the processor how to merge the files.',
28 silly publish   dependencies: {},
28 silly publish   devDependencies: {},
28 silly publish   keywords:
28 silly publish    [ 'JSON',
28 silly publish      'merge',
28 silly publish      'extend',
28 silly publish      'extends',
28 silly publish      'override',
28 silly publish      'delete',
28 silly publish      'match',
28 silly publish      'insert',
28 silly publish      'append',
28 silly publish      'prepend',
28 silly publish      'indicators',
28 silly publish      'indicator',
28 silly publish      'object',
28 silly publish      'json extend',
28 silly publish      'json merge' ],
28 silly publish   directories: { test: 'tests' },
28 silly publish   readme: '[![json_merger downloads/month](//img.shields.io/npm/dm/json_merger.svg)](https://www.npmjs.com/package/json_merger)\r\n[![json_merger version](//img.shields.io/npm/v/json_merger.svg)](https://www.npmjs.com/package/json_merger)\r\n[![json_merger licence](//img.shields.io/npm/l/json_merger.svg)](https://www.npmjs.com/package/json_merger)\r\n\r\n## Table of Contents:\r\n\r\n* [`.fromFile(\'file.json\')`](#fromfilefilejson)\r\n  * [config](#config)\r\n    * [asText](#configastext)\r\n    * [javascript](#configjavascript)\r\n    * [scope](#configscope)\r\n    * [variables](#configvariables)\r\n  * [`@extends`](#extends)\r\n* [Indicators](#indicators)\r\n  * [`@extends`](#extends)\r\n  * [`@override`](#override)\r\n  * [`@append`, `@prepend`, `@insert`](#append-prepend-insert)\r\n  * [`@match`](#match)\r\n  * [`@move`](#move)\r\n  * [`@comment`](#comment)\r\n* [`.merge(objA, objB)`](#mergeobja-objb)\r\n* [Command line interface `json_merger`](#command-line-interface-json_merger)\r\n* [Expiremental usage](#expiremental-usage)\r\n\r\n> Apply indicators such as [`@insert`](#append-prepend-insert), [`@match`](#match) and [`@override`](#override) to tell the processor how to merge the files.\r\n\r\n## `.fromFile(\'file.json\')`\r\n\r\n    var json_merger = require(\'json_merger\');\r\n    var result = json_merger = json_merger.fromFile(\'fileA.json\');\r\n\r\n**fileA.json:**\r\n\r\n    {\r\n    \t"@extends": "fileB.json",\r\n    \t"prop1": {\r\n    \t\t"@override": true,\r\n    \t\t"prop_a": "this will override fileB.json\'s property prop1"\r\n    \t},\r\n    \t"prop2": {\r\n    \t\t"prop_a": "some value"\r\n    \t}\r\n    }\r\n\r\n**fileB.json:**\r\n\r\n    {\r\n    \t"prop1": {\r\n    \t\t"prop_b": "never gonna be seen"\r\n    \t},\r\n    \t"prop2": {\r\n    \t\t"prop_b": "some other value"\r\n    \t}\r\n    }\r\n\r\nResult:\r\n\r\n    {\r\n    \t"prop1": {\r\n    \t\t"prop_a": "this will override fileB.json\'s property prop1"\r\n    \t},\r\n    \t"prop2": {\r\n    \t\t"prop_a": "some value",\r\n    \t\t"prop_b": "some other value"\r\n    \t}\r\n    }\r\n\r\n\r\n### config\r\n\r\n    {\r\n        asText: false, // true, false, \'pretty\'\r\n        javascript: false, // true, false\r\n        scope: \'\', // directory to look for initial file\r\n        variables: {\r\n            // contains a key->value object with variables to @extends\r\n        }\r\n    }\r\n\r\n#### config.asText\r\n\r\ndefault: false (in command line interface it will default to true)\r\n\r\nValues are `true`, `false`, `pretty` where pretty will indent the JSON with `\\t` for each block.\r\n\r\n#### config.javascript\r\n\r\n*Expiremental*\r\n\r\ndefault: false\r\n\r\nPerserve JavaScript functions, regexp, etc see [Expiremental usage](#expiremental-usage)\r\n\r\n#### config.scope\r\n\r\ndefault: [`process.cwd()`](https://nodejs.org/api/process.html#process_process_cwd)\r\n\r\n\r\nThe initial directory which the inputFile is relative too, will be overridden for each [`@extends`](#extends) file and is set to dirname of current inputFile.\r\n\r\n#### config.variables\r\n\r\nVariables is used in [`@extends`](#extends) like the following:\r\n\r\n    json_merger.fromFile(\'fileA.json\', {\r\n        "project_root": "/var/www/project123"\r\n    });\r\n\r\n**fileA.json**\r\n\r\n    {\r\n        "@extends": ["${project_root}/fileB.json"]\r\n    }\r\n\r\n--------\r\n\r\n## Indicators:\r\n\r\n### `@extends`\r\n\r\nAn array / string indicating which files a given object extends, this is a root property\r\n\r\n    {\r\n    \t"@extends": ["main_file.json", "project_file.js", "mixin_file.json"]\r\n    }\r\n\r\n### `@override`\r\n\r\nAn array or `true` indicating that the given property will be overridden. When used with `true` the whole property will be overridden. When used with an array the listed properties will be overridden:\r\n\r\n**Usuage of `true`**\r\n\r\n    {\r\n    \t"@extends": ["b.json"],\r\n    \t"a": {\r\n    \t\t"@override": true,\r\n    \t\t"prop_1": {"a":1},\r\n    \t\t"prop_2": {"a":2}\r\n    \t}\r\n    }\r\n\r\n**b.json**\r\n\r\n    {\r\n    \t"a": {\r\n    \t\t"prop_1": {"b":1},\r\n    \t\t"prop_2": {"b":2},\r\n    \t\t"prop_3": {"b":3},\r\n    \t\t"prop_4": {"b":4}\r\n    \t}\r\n    }\r\n\r\n**Result**\r\n\r\n    {\r\n    \t"a": {\r\n    \t\t"prop_1": {"a":1},\r\n    \t\t"prop_2": {"a":2}\r\n    \t}\r\n    }\r\n\r\n**Usuage of array**\r\n\r\n    {\r\n    \t"@extends": ["b.json"],\r\n    \t"a": {\r\n    \t\t"@override": ["prop_1"],\r\n    \t\t"prop_1": {"a":1},\r\n    \t\t"prop_2": {"a":2}\r\n    \t}\r\n    }\r\n\r\n**b.json**\r\n\r\n    {\r\n    \t"a": {\r\n    \t\t"prop_1": {"b":1},\r\n    \t\t"prop_2": {"b":2},\r\n    \t\t"prop_3": {"b":3},\r\n    \t\t"prop_4": {"b":4}\r\n    \t}\r\n    }\r\n\r\n**Result**\r\n\r\n    {\r\n    \t"a": {\r\n    \t\t"prop_1": {"a":1},\r\n    \t\t"prop_2": {"a":2, "b":2},\r\n    \t\t"prop_3": {"b":3},\r\n    \t\t"prop_4": {"b":4}\r\n    \t}\r\n    }\r\n\r\n### `@append`, `@prepend`, `@insert`\r\n\r\nWhen working with array the default behaviour will be to merge on indexes, eg first item in the arrays will be merged together etc.\r\n\r\n* `@append: true` is alias for `@insert: -1`\r\n* `@prepend: true` is alias for `@insert: 0`\r\n\r\nUsing `@insert`:\r\n\r\n    {\r\n    \t"@extends": ["b.json"],\r\n    \t"a": [\r\n    \t\t{\r\n    \t\t\t"@insert": 1,\r\n    \t\t\t"a": 1\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n**b.json**\r\n\r\n    {\r\n    \t"a": [\r\n    \t\t{\r\n    \t\t\t"b": 1\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"b": 2\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"b": 3\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n**Result**\r\n\r\n    {\r\n    \t"a": [\r\n    \t\t{\r\n    \t\t\t"b": 1\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"a": 1\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"b": 2\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"b": 3\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n### `@match`\r\n\r\nMatch can be used to match a given item in an array; Supported syntax:\r\n\r\n    [prop1=val1][prop2=\'val2\']\r\n\r\nQuoting is optional but required if you want strict comparison\r\n\r\n**Usuage**\r\n\r\n    {\r\n    \t"@extends": ["b.json"],\r\n    \t"columns": [\r\n    \t\t{\r\n    \t\t\t"@match": "[name=token]",\r\n    \t\t\t"type": "float"\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n**b.json**\r\n\r\n    {\r\n    \t"columns": [\r\n    \t\t{\r\n    \t\t\t"name": "firstname",\r\n    \t\t\t"type": "varchar(64)"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"name": "lastname",\r\n    \t\t\t"type": "varchar(64)"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"name": "token",\r\n    \t\t\t"type": "integer"\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n**Result**\r\n\r\n    {\r\n    \t"columns": [\r\n    \t\t{\r\n    \t\t\t"name": "firstname",\r\n    \t\t\t"type": "varchar(64)"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"name": "lastname",\r\n    \t\t\t"type": "varchar(64)"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t"name": "token",\r\n    \t\t\t"type": "float"\r\n    \t\t}\r\n    \t]\r\n    }\r\n\r\n### `@move`\r\n\r\nThis indicator is the same as [`@insert`](#append-prepend-insert) but is used together with [`@match`](#match).\r\n\r\n### `@comment`\r\n\r\nThese will be removed in the merging process and is intented to be used for internal comments about overrides etc.\r\n\r\n    {\r\n\t    "@comment": "I did this because...."\r\n    }\r\n\r\n--------\r\n\r\n## `.merge(objA, objB)`\r\n\r\nYou can use json_merger without having to use JSON stored in files, you can use it directly with JavaScript objects:\r\n\r\n    var json_merger = require(\'json_merger\');\r\n\r\n    var a = {\r\n        a: {\r\n            "@override": true,\r\n            "my_value": 1234\r\n        }\r\n    };\r\n    var b = {\r\n        a: {\r\n            "my_b_value": 1234\r\n        }\r\n    }\r\n\r\n    var result = json_merger.merge(a, b);\r\n\r\n    console.log(result.a.my_value); // 1234\r\n    console.log(result.a.my_b_value); // undefined\r\n\r\n--------\r\n\r\n## Command line interface `json_merger`\r\n\r\nYou can use json_merger as a command line tool:\r\n\r\n    usage:\r\n      json_merger inputFile [...options]\r\n\r\n    options:\r\n      --help, -h                    Show this page\r\n      --pretty, -p                  Prettify the output json\r\n      --javascript, -j              Perserve JavaScript functions, regexp, etc\r\n      --variables, -v               Send key=value list of variables\r\n                                      Usage: -v key1=value1 key2=value2\r\n\r\n\r\nUsage:\r\n\r\n    json_merger input.json > out.json\r\n    json_merger input.json --pretty > out.json\r\n    json_merger input.json --javascript > out.json\r\n    json_merger input.json -p -j -v root=/var/www/ > out.json\r\n\r\nMake sure that add json_merger to the `$PATH` variable:\r\n\r\n    npm install -g json_merger\r\n\r\n**~/.bashrc ( *~/.bash_profile* on OSX )**\r\n\r\n    #NODE_PATH contains the path to global installed node modules\r\n    #export NODE_PATH=/usr/local/lib/node_modules/;\r\n    export PATH=$NODE_PATH/json_merger/:$PATH\r\n\r\n## Expiremental usage:\r\n\r\nWorking with JavaScript code in JSON *Use at own risk :-)*\r\n\r\n    var json_merger = require(\'json_merger\');\r\n\r\n    var output = json_merger.fromFile(\'file.jsonx\', {\r\n        asText: \'pretty\',\r\n        javascript: true\r\n    });\r\n\r\n**file.jsonx**\r\n\r\n    {\r\n        "@extends": ["fileB.jsonx"],\r\n        "my_function": function(a, b) { return doStuff(a, b) },\r\n        "obj": {\r\n            "a": (function(a, b) { /* code here */ })(1, 2)\r\n        }\r\n    }\r\n\r\n**fileB.jsonx**\r\n\r\n    {\r\n        "@extends": ["fileB.jsonx"],\r\n        "obj": {\r\n            "b": (function(a, b) { /* another code here */ })(1, 2)\r\n        }\r\n    }\r\n\r\nResult:\r\n\r\n    {\r\n        "my_function": function(a, b) { return doStuff(a, b) },\r\n        "obj": {\r\n            "a": (function(a, b) { /* code here */ })(1, 2),\r\n            "b": (function(a, b) { /* another code here */ })(1, 2)\r\n        }\r\n    }\r\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   _id: 'json_merger@0.9.12',
28 silly publish   _shasum: 'a0a5699bd77d6312ac514c1c1206d591061bf851',
28 silly publish   _from: '.' }
29 verbose request where is /json_merger
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 5002ea623c263660
32 verbose url raw /json_merger
33 verbose url resolving [ 'https://registry.npmjs.org/', './json_merger' ]
34 verbose url resolved https://registry.npmjs.org/json_merger
35 verbose request where is https://registry.npmjs.org/json_merger
36 info trying registry request attempt 1 at 17:10:58
37 http PUT https://registry.npmjs.org/json_merger
38 http 403 https://registry.npmjs.org/json_merger
39 verbose headers { date: 'Wed, 18 Mar 2015 16:10:59 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '18448',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-ams4131-AMS',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1426695058.841442,VS0,VE773',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.9.12
41 error old={"name":"json_merger","version":"0.9.12","main":"json_merger.js","scripts":{"test":"bash runtests"},"repository":{},"author":{"name":"Andreas Louv","email":"and@comprendo.dk"},"license":"ISC","description":"Merge JSON with indicators such as `@override`, `@match`, `@delete` and `@insert` to tell the processor how to merge the files.","dependencies":{},"devDependencies":{},"keywords":["JSON","merge","extend","extends","override","delete","match","insert","append","prepend","indicators","indicator","object","json extend","json merge"],"directories":{"test":"tests"},"_id":"json_merger@0.9.12","_shasum":"f025bd4854a0612bf1a2ad0313ee58a34718bfbc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dev-null","email":"and@comprendo.dk"},"maintainers":[{"name":"dev-null","email":"and@comprendo.dk"}],"dist":{"shasum":"f025bd4854a0612bf1a2ad0313ee58a34718bfbc","tarball":"http://registry.npmjs.org/json_merger/-/json_merger-0.9.12.tgz"}}
41 error new={"name":"json_merger","version":"0.9.12","main":"json_merger.js","scripts":{"test":"bash runtests"},"repository":{},"author":{"name":"Andreas Louv","email":"and@comprendo.dk"},"license":"ISC","description":"Merge JSON with indicators such as `@override`, `@match`, `@delete` and `@insert` to tell the processor how to merge the files.","dependencies":{},"devDependencies":{},"keywords":["JSON","merge","extend","extends","override","delete","match","insert","append","prepend","indicators","indicator","object","json extend","json merge"],"directories":{"test":"tests"},"readme":"[![json_merger downloads/month](//img.shields.io/npm/dm/json_merger.svg)](https://www.npmjs.com/package/json_merger)\u000d\u000a[![json_merger version](//img.shields.io/npm/v/json_merger.svg)](https://www.npmjs.com/package/json_merger)\u000d\u000a[![json_merger licence](//img.shields.io/npm/l/json_merger.svg)](https://www.npmjs.com/package/json_merger)\u000d\u000a\u000d\u000a## Table of Contents:\u000d\u000a\u000d\u000a* [`.fromFile('file.json')`](#fromfilefilejson)\u000d\u000a  * [config](#config)\u000d\u000a    * [asText](#configastext)\u000d\u000a    * [javascript](#configjavascript)\u000d\u000a    * [scope](#configscope)\u000d\u000a    * [variables](#configvariables)\u000d\u000a  * [`@extends`](#extends)\u000d\u000a* [Indicators](#indicators)\u000d\u000a  * [`@extends`](#extends)\u000d\u000a  * [`@override`](#override)\u000d\u000a  * [`@append`, `@prepend`, `@insert`](#append-prepend-insert)\u000d\u000a  * [`@match`](#match)\u000d\u000a  * [`@move`](#move)\u000d\u000a  * [`@comment`](#comment)\u000d\u000a* [`.merge(objA, objB)`](#mergeobja-objb)\u000d\u000a* [Command line interface `json_merger`](#command-line-interface-json_merger)\u000d\u000a* [Expiremental usage](#expiremental-usage)\u000d\u000a\u000d\u000a> Apply indicators such as [`@insert`](#append-prepend-insert), [`@match`](#match) and [`@override`](#override) to tell the processor how to merge the files.\u000d\u000a\u000d\u000a## `.fromFile('file.json')`\u000d\u000a\u000d\u000a    var json_merger = require('json_merger');\u000d\u000a    var result = json_merger = json_merger.fromFile('fileA.json');\u000d\u000a\u000d\u000a**fileA.json:**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": \"fileB.json\",\u000d\u000a    \u0009\"prop1\": {\u000d\u000a    \u0009\u0009\"@override\": true,\u000d\u000a    \u0009\u0009\"prop_a\": \"this will override fileB.json's property prop1\"\u000d\u000a    \u0009},\u000d\u000a    \u0009\"prop2\": {\u000d\u000a    \u0009\u0009\"prop_a\": \"some value\"\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**fileB.json:**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"prop1\": {\u000d\u000a    \u0009\u0009\"prop_b\": \"never gonna be seen\"\u000d\u000a    \u0009},\u000d\u000a    \u0009\"prop2\": {\u000d\u000a    \u0009\u0009\"prop_b\": \"some other value\"\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000aResult:\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"prop1\": {\u000d\u000a    \u0009\u0009\"prop_a\": \"this will override fileB.json's property prop1\"\u000d\u000a    \u0009},\u000d\u000a    \u0009\"prop2\": {\u000d\u000a    \u0009\u0009\"prop_a\": \"some value\",\u000d\u000a    \u0009\u0009\"prop_b\": \"some other value\"\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a\u000d\u000a### config\u000d\u000a\u000d\u000a    {\u000d\u000a        asText: false, // true, false, 'pretty'\u000d\u000a        javascript: false, // true, false\u000d\u000a        scope: '', // directory to look for initial file\u000d\u000a        variables: {\u000d\u000a            // contains a key->value object with variables to @extends\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000a#### config.asText\u000d\u000a\u000d\u000adefault: false (in command line interface it will default to true)\u000d\u000a\u000d\u000aValues are `true`, `false`, `pretty` where pretty will indent the JSON with `\\t` for each block.\u000d\u000a\u000d\u000a#### config.javascript\u000d\u000a\u000d\u000a*Expiremental*\u000d\u000a\u000d\u000adefault: false\u000d\u000a\u000d\u000aPerserve JavaScript functions, regexp, etc see [Expiremental usage](#expiremental-usage)\u000d\u000a\u000d\u000a#### config.scope\u000d\u000a\u000d\u000adefault: [`process.cwd()`](https://nodejs.org/api/process.html#process_process_cwd)\u000d\u000a\u000d\u000a\u000d\u000aThe initial directory which the inputFile is relative too, will be overridden for each [`@extends`](#extends) file and is set to dirname of current inputFile.\u000d\u000a\u000d\u000a#### config.variables\u000d\u000a\u000d\u000aVariables is used in [`@extends`](#extends) like the following:\u000d\u000a\u000d\u000a    json_merger.fromFile('fileA.json', {\u000d\u000a        \"project_root\": \"/var/www/project123\"\u000d\u000a    });\u000d\u000a\u000d\u000a**fileA.json**\u000d\u000a\u000d\u000a    {\u000d\u000a        \"@extends\": [\"${project_root}/fileB.json\"]\u000d\u000a    }\u000d\u000a\u000d\u000a--------\u000d\u000a\u000d\u000a## Indicators:\u000d\u000a\u000d\u000a### `@extends`\u000d\u000a\u000d\u000aAn array / string indicating which files a given object extends, this is a root property\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": [\"main_file.json\", \"project_file.js\", \"mixin_file.json\"]\u000d\u000a    }\u000d\u000a\u000d\u000a### `@override`\u000d\u000a\u000d\u000aAn array or `true` indicating that the given property will be overridden. When used with `true` the whole property will be overridden. When used with an array the listed properties will be overridden:\u000d\u000a\u000d\u000a**Usuage of `true`**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": [\"b.json\"],\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"@override\": true,\u000d\u000a    \u0009\u0009\"prop_1\": {\"a\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"a\":2}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**b.json**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"prop_1\": {\"b\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"b\":2},\u000d\u000a    \u0009\u0009\"prop_3\": {\"b\":3},\u000d\u000a    \u0009\u0009\"prop_4\": {\"b\":4}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**Result**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"prop_1\": {\"a\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"a\":2}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**Usuage of array**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": [\"b.json\"],\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"@override\": [\"prop_1\"],\u000d\u000a    \u0009\u0009\"prop_1\": {\"a\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"a\":2}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**b.json**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"prop_1\": {\"b\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"b\":2},\u000d\u000a    \u0009\u0009\"prop_3\": {\"b\":3},\u000d\u000a    \u0009\u0009\"prop_4\": {\"b\":4}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a**Result**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": {\u000d\u000a    \u0009\u0009\"prop_1\": {\"a\":1},\u000d\u000a    \u0009\u0009\"prop_2\": {\"a\":2, \"b\":2},\u000d\u000a    \u0009\u0009\"prop_3\": {\"b\":3},\u000d\u000a    \u0009\u0009\"prop_4\": {\"b\":4}\u000d\u000a    \u0009}\u000d\u000a    }\u000d\u000a\u000d\u000a### `@append`, `@prepend`, `@insert`\u000d\u000a\u000d\u000aWhen working with array the default behaviour will be to merge on indexes, eg first item in the arrays will be merged together etc.\u000d\u000a\u000d\u000a* `@append: true` is alias for `@insert: -1`\u000d\u000a* `@prepend: true` is alias for `@insert: 0`\u000d\u000a\u000d\u000aUsing `@insert`:\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": [\"b.json\"],\u000d\u000a    \u0009\"a\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"@insert\": 1,\u000d\u000a    \u0009\u0009\u0009\"a\": 1\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a**b.json**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 1\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 2\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 3\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a**Result**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"a\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 1\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"a\": 1\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 2\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"b\": 3\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a### `@match`\u000d\u000a\u000d\u000aMatch can be used to match a given item in an array; Supported syntax:\u000d\u000a\u000d\u000a    [prop1=val1][prop2='val2']\u000d\u000a\u000d\u000aQuoting is optional but required if you want strict comparison\u000d\u000a\u000d\u000a**Usuage**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"@extends\": [\"b.json\"],\u000d\u000a    \u0009\"columns\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"@match\": \"[name=token]\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"float\"\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a**b.json**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"columns\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"firstname\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"varchar(64)\"\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"lastname\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"varchar(64)\"\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"token\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"integer\"\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a**Result**\u000d\u000a\u000d\u000a    {\u000d\u000a    \u0009\"columns\": [\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"firstname\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"varchar(64)\"\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"lastname\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"varchar(64)\"\u000d\u000a    \u0009\u0009},\u000d\u000a    \u0009\u0009{\u000d\u000a    \u0009\u0009\u0009\"name\": \"token\",\u000d\u000a    \u0009\u0009\u0009\"type\": \"float\"\u000d\u000a    \u0009\u0009}\u000d\u000a    \u0009]\u000d\u000a    }\u000d\u000a\u000d\u000a### `@move`\u000d\u000a\u000d\u000aThis indicator is the same as [`@insert`](#append-prepend-insert) but is used together with [`@match`](#match).\u000d\u000a\u000d\u000a### `@comment`\u000d\u000a\u000d\u000aThese will be removed in the merging process and is intented to be used for internal comments about overrides etc.\u000d\u000a\u000d\u000a    {\u000d\u000a\u0009    \"@comment\": \"I did this because....\"\u000d\u000a    }\u000d\u000a\u000d\u000a--------\u000d\u000a\u000d\u000a## `.merge(objA, objB)`\u000d\u000a\u000d\u000aYou can use json_merger without having to use JSON stored in files, you can use it directly with JavaScript objects:\u000d\u000a\u000d\u000a    var json_merger = require('json_merger');\u000d\u000a\u000d\u000a    var a = {\u000d\u000a        a: {\u000d\u000a            \"@override\": true,\u000d\u000a            \"my_value\": 1234\u000d\u000a        }\u000d\u000a    };\u000d\u000a    var b = {\u000d\u000a        a: {\u000d\u000a            \"my_b_value\": 1234\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000a    var result = json_merger.merge(a, b);\u000d\u000a\u000d\u000a    console.log(result.a.my_value); // 1234\u000d\u000a    console.log(result.a.my_b_value); // undefined\u000d\u000a\u000d\u000a--------\u000d\u000a\u000d\u000a## Command line interface `json_merger`\u000d\u000a\u000d\u000aYou can use json_merger as a command line tool:\u000d\u000a\u000d\u000a    usage:\u000d\u000a      json_merger inputFile [...options]\u000d\u000a\u000d\u000a    options:\u000d\u000a      --help, -h                    Show this page\u000d\u000a      --pretty, -p                  Prettify the output json\u000d\u000a      --javascript, -j              Perserve JavaScript functions, regexp, etc\u000d\u000a      --variables, -v               Send key=value list of variables\u000d\u000a                                      Usage: -v key1=value1 key2=value2\u000d\u000a\u000d\u000a\u000d\u000aUsage:\u000d\u000a\u000d\u000a    json_merger input.json > out.json\u000d\u000a    json_merger input.json --pretty > out.json\u000d\u000a    json_merger input.json --javascript > out.json\u000d\u000a    json_merger input.json -p -j -v root=/var/www/ > out.json\u000d\u000a\u000d\u000aMake sure that add json_merger to the `$PATH` variable:\u000d\u000a\u000d\u000a    npm install -g json_merger\u000d\u000a\u000d\u000a**~/.bashrc ( *~/.bash_profile* on OSX )**\u000d\u000a\u000d\u000a    #NODE_PATH contains the path to global installed node modules\u000d\u000a    #export NODE_PATH=/usr/local/lib/node_modules/;\u000d\u000a    export PATH=$NODE_PATH/json_merger/:$PATH\u000d\u000a\u000d\u000a## Expiremental usage:\u000d\u000a\u000d\u000aWorking with JavaScript code in JSON *Use at own risk :-)*\u000d\u000a\u000d\u000a    var json_merger = require('json_merger');\u000d\u000a\u000d\u000a    var output = json_merger.fromFile('file.jsonx', {\u000d\u000a        asText: 'pretty',\u000d\u000a        javascript: true\u000d\u000a    });\u000d\u000a\u000d\u000a**file.jsonx**\u000d\u000a\u000d\u000a    {\u000d\u000a        \"@extends\": [\"fileB.jsonx\"],\u000d\u000a        \"my_function\": function(a, b) { return doStuff(a, b) },\u000d\u000a        \"obj\": {\u000d\u000a            \"a\": (function(a, b) { /* code here */ })(1, 2)\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000a**fileB.jsonx**\u000d\u000a\u000d\u000a    {\u000d\u000a        \"@extends\": [\"fileB.jsonx\"],\u000d\u000a        \"obj\": {\u000d\u000a            \"b\": (function(a, b) { /* another code here */ })(1, 2)\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000aResult:\u000d\u000a\u000d\u000a    {\u000d\u000a        \"my_function\": function(a, b) { return doStuff(a, b) },\u000d\u000a        \"obj\": {\u000d\u000a            \"a\": (function(a, b) { /* code here */ })(1, 2),\u000d\u000a            \"b\": (function(a, b) { /* another code here */ })(1, 2)\u000d\u000a        }\u000d\u000a    }\u000d\u000a","readmeFilename":"README.md","_id":"json_merger@0.9.12","_shasum":"a0a5699bd77d6312ac514c1c1206d591061bf851","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dev-null","email":"and@comprendo.dk"},"maintainers":[{"name":"dev-null","email":"and@comprendo.dk"}],"dist":{"shasum":"a0a5699bd77d6312ac514c1c1206d591061bf851","tarball":"http://registry.npmjs.org/json_merger/-/json_merger-0.9.12.tgz"}}: json_merger
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.4.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/andreas/Dropbox/JavaScript/json_merger
46 error node -v v0.10.32
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
